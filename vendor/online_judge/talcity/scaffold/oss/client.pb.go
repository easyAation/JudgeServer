// Code generated by protoc-gen-go. DO NOT EDIT.
// source: client.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	client.proto

It has these top-level messages:
	PutObjectReq
	EmptyResp
	PreMultiUploadReq
	GenerateURLReq
	GenerateURLResp
	MultiUploadReq
	MultiUploadCompleteReq
	Bucket
	XMLName
	MultipartUploadResult
*/
package oss

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PutObjectReq struct {
	Bucket     *Bucket `protobuf:"bytes,1,opt,name=Bucket" json:"Bucket,omitempty"`
	ObjectName string  `protobuf:"bytes,2,opt,name=ObjectName" json:"ObjectName,omitempty"`
	Body       []byte  `protobuf:"bytes,3,opt,name=Body,proto3" json:"Body,omitempty"`
}

func (m *PutObjectReq) Reset()                    { *m = PutObjectReq{} }
func (m *PutObjectReq) String() string            { return proto.CompactTextString(m) }
func (*PutObjectReq) ProtoMessage()               {}
func (*PutObjectReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PutObjectReq) GetBucket() *Bucket {
	if m != nil {
		return m.Bucket
	}
	return nil
}

func (m *PutObjectReq) GetObjectName() string {
	if m != nil {
		return m.ObjectName
	}
	return ""
}

func (m *PutObjectReq) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

type EmptyResp struct {
}

func (m *EmptyResp) Reset()                    { *m = EmptyResp{} }
func (m *EmptyResp) String() string            { return proto.CompactTextString(m) }
func (*EmptyResp) ProtoMessage()               {}
func (*EmptyResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type PreMultiUploadReq struct {
	Bucket     *Bucket `protobuf:"bytes,1,opt,name=Bucket" json:"Bucket,omitempty"`
	ObjectName string  `protobuf:"bytes,2,opt,name=ObjectName" json:"ObjectName,omitempty"`
}

func (m *PreMultiUploadReq) Reset()                    { *m = PreMultiUploadReq{} }
func (m *PreMultiUploadReq) String() string            { return proto.CompactTextString(m) }
func (*PreMultiUploadReq) ProtoMessage()               {}
func (*PreMultiUploadReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PreMultiUploadReq) GetBucket() *Bucket {
	if m != nil {
		return m.Bucket
	}
	return nil
}

func (m *PreMultiUploadReq) GetObjectName() string {
	if m != nil {
		return m.ObjectName
	}
	return ""
}

type GenerateURLReq struct {
	Bucket       *Bucket `protobuf:"bytes,1,opt,name=Bucket" json:"Bucket,omitempty"`
	ObjectName   string  `protobuf:"bytes,2,opt,name=ObjectName" json:"ObjectName,omitempty"`
	ExpiresToSec int64   `protobuf:"varint,3,opt,name=ExpiresToSec" json:"ExpiresToSec,omitempty"`
}

func (m *GenerateURLReq) Reset()                    { *m = GenerateURLReq{} }
func (m *GenerateURLReq) String() string            { return proto.CompactTextString(m) }
func (*GenerateURLReq) ProtoMessage()               {}
func (*GenerateURLReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GenerateURLReq) GetBucket() *Bucket {
	if m != nil {
		return m.Bucket
	}
	return nil
}

func (m *GenerateURLReq) GetObjectName() string {
	if m != nil {
		return m.ObjectName
	}
	return ""
}

func (m *GenerateURLReq) GetExpiresToSec() int64 {
	if m != nil {
		return m.ExpiresToSec
	}
	return 0
}

type GenerateURLResp struct {
	URI string `protobuf:"bytes,1,opt,name=URI" json:"URI,omitempty"`
}

func (m *GenerateURLResp) Reset()                    { *m = GenerateURLResp{} }
func (m *GenerateURLResp) String() string            { return proto.CompactTextString(m) }
func (*GenerateURLResp) ProtoMessage()               {}
func (*GenerateURLResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GenerateURLResp) GetURI() string {
	if m != nil {
		return m.URI
	}
	return ""
}

type MultiUploadReq struct {
	Bucket     *Bucket                `protobuf:"bytes,1,opt,name=Bucket" json:"Bucket,omitempty"`
	UploadID   *MultipartUploadResult `protobuf:"bytes,2,opt,name=UploadID" json:"UploadID,omitempty"`
	Chunk      []byte                 `protobuf:"bytes,3,opt,name=Chunk,proto3" json:"Chunk,omitempty"`
	PartLength int64                  `protobuf:"varint,4,opt,name=PartLength" json:"PartLength,omitempty"`
	PartNumber int32                  `protobuf:"varint,5,opt,name=PartNumber" json:"PartNumber,omitempty"`
}

func (m *MultiUploadReq) Reset()                    { *m = MultiUploadReq{} }
func (m *MultiUploadReq) String() string            { return proto.CompactTextString(m) }
func (*MultiUploadReq) ProtoMessage()               {}
func (*MultiUploadReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *MultiUploadReq) GetBucket() *Bucket {
	if m != nil {
		return m.Bucket
	}
	return nil
}

func (m *MultiUploadReq) GetUploadID() *MultipartUploadResult {
	if m != nil {
		return m.UploadID
	}
	return nil
}

func (m *MultiUploadReq) GetChunk() []byte {
	if m != nil {
		return m.Chunk
	}
	return nil
}

func (m *MultiUploadReq) GetPartLength() int64 {
	if m != nil {
		return m.PartLength
	}
	return 0
}

func (m *MultiUploadReq) GetPartNumber() int32 {
	if m != nil {
		return m.PartNumber
	}
	return 0
}

type MultiUploadCompleteReq struct {
	Bucket   *Bucket                  `protobuf:"bytes,1,opt,name=Bucket" json:"Bucket,omitempty"`
	UploadID *MultipartUploadResult   `protobuf:"bytes,2,opt,name=UploadID" json:"UploadID,omitempty"`
	Parts    []*MultipartUploadResult `protobuf:"bytes,3,rep,name=Parts" json:"Parts,omitempty"`
}

func (m *MultiUploadCompleteReq) Reset()                    { *m = MultiUploadCompleteReq{} }
func (m *MultiUploadCompleteReq) String() string            { return proto.CompactTextString(m) }
func (*MultiUploadCompleteReq) ProtoMessage()               {}
func (*MultiUploadCompleteReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *MultiUploadCompleteReq) GetBucket() *Bucket {
	if m != nil {
		return m.Bucket
	}
	return nil
}

func (m *MultiUploadCompleteReq) GetUploadID() *MultipartUploadResult {
	if m != nil {
		return m.UploadID
	}
	return nil
}

func (m *MultiUploadCompleteReq) GetParts() []*MultipartUploadResult {
	if m != nil {
		return m.Parts
	}
	return nil
}

type Bucket struct {
	Endpoint            string `protobuf:"bytes,1,opt,name=Endpoint" json:"Endpoint,omitempty"`
	AccessKey           string `protobuf:"bytes,2,opt,name=AccessKey" json:"AccessKey,omitempty"`
	SecretKey           string `protobuf:"bytes,3,opt,name=SecretKey" json:"SecretKey,omitempty"`
	Bucket              string `protobuf:"bytes,4,opt,name=Bucket" json:"Bucket,omitempty"`
	UseCname            bool   `protobuf:"varint,5,opt,name=UseCname" json:"UseCname,omitempty"`
	ConnectTimeoutSec   int64  `protobuf:"varint,6,opt,name=ConnectTimeoutSec" json:"ConnectTimeoutSec,omitempty"`
	ReadWriteTimeoutSec int64  `protobuf:"varint,7,opt,name=ReadWriteTimeoutSec" json:"ReadWriteTimeoutSec,omitempty"`
}

func (m *Bucket) Reset()                    { *m = Bucket{} }
func (m *Bucket) String() string            { return proto.CompactTextString(m) }
func (*Bucket) ProtoMessage()               {}
func (*Bucket) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Bucket) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *Bucket) GetAccessKey() string {
	if m != nil {
		return m.AccessKey
	}
	return ""
}

func (m *Bucket) GetSecretKey() string {
	if m != nil {
		return m.SecretKey
	}
	return ""
}

func (m *Bucket) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

func (m *Bucket) GetUseCname() bool {
	if m != nil {
		return m.UseCname
	}
	return false
}

func (m *Bucket) GetConnectTimeoutSec() int64 {
	if m != nil {
		return m.ConnectTimeoutSec
	}
	return 0
}

func (m *Bucket) GetReadWriteTimeoutSec() int64 {
	if m != nil {
		return m.ReadWriteTimeoutSec
	}
	return 0
}

type XMLName struct {
	Space string `protobuf:"bytes,1,opt,name=Space" json:"Space,omitempty"`
	Local string `protobuf:"bytes,2,opt,name=Local" json:"Local,omitempty"`
}

func (m *XMLName) Reset()                    { *m = XMLName{} }
func (m *XMLName) String() string            { return proto.CompactTextString(m) }
func (*XMLName) ProtoMessage()               {}
func (*XMLName) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *XMLName) GetSpace() string {
	if m != nil {
		return m.Space
	}
	return ""
}

func (m *XMLName) GetLocal() string {
	if m != nil {
		return m.Local
	}
	return ""
}

type MultipartUploadResult struct {
	XMLName    *XMLName `protobuf:"bytes,1,opt,name=XMLName" json:"XMLName,omitempty"`
	Bucket     string   `protobuf:"bytes,2,opt,name=Bucket" json:"Bucket,omitempty"`
	Key        string   `protobuf:"bytes,3,opt,name=Key" json:"Key,omitempty"`
	UploadID   string   `protobuf:"bytes,4,opt,name=UploadID" json:"UploadID,omitempty"`
	PartNumber int32    `protobuf:"varint,5,opt,name=PartNumber" json:"PartNumber,omitempty"`
	ETag       string   `protobuf:"bytes,6,opt,name=ETag" json:"ETag,omitempty"`
	Location   string   `protobuf:"bytes,7,opt,name=Location" json:"Location,omitempty"`
}

func (m *MultipartUploadResult) Reset()                    { *m = MultipartUploadResult{} }
func (m *MultipartUploadResult) String() string            { return proto.CompactTextString(m) }
func (*MultipartUploadResult) ProtoMessage()               {}
func (*MultipartUploadResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *MultipartUploadResult) GetXMLName() *XMLName {
	if m != nil {
		return m.XMLName
	}
	return nil
}

func (m *MultipartUploadResult) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

func (m *MultipartUploadResult) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *MultipartUploadResult) GetUploadID() string {
	if m != nil {
		return m.UploadID
	}
	return ""
}

func (m *MultipartUploadResult) GetPartNumber() int32 {
	if m != nil {
		return m.PartNumber
	}
	return 0
}

func (m *MultipartUploadResult) GetETag() string {
	if m != nil {
		return m.ETag
	}
	return ""
}

func (m *MultipartUploadResult) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func init() {
	proto.RegisterType((*PutObjectReq)(nil), "pb.PutObjectReq")
	proto.RegisterType((*EmptyResp)(nil), "pb.EmptyResp")
	proto.RegisterType((*PreMultiUploadReq)(nil), "pb.PreMultiUploadReq")
	proto.RegisterType((*GenerateURLReq)(nil), "pb.GenerateURLReq")
	proto.RegisterType((*GenerateURLResp)(nil), "pb.GenerateURLResp")
	proto.RegisterType((*MultiUploadReq)(nil), "pb.MultiUploadReq")
	proto.RegisterType((*MultiUploadCompleteReq)(nil), "pb.MultiUploadCompleteReq")
	proto.RegisterType((*Bucket)(nil), "pb.Bucket")
	proto.RegisterType((*XMLName)(nil), "pb.XMLName")
	proto.RegisterType((*MultipartUploadResult)(nil), "pb.MultipartUploadResult")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for OOS service

type OOSClient interface {
	PutObject(ctx context.Context, in *PutObjectReq, opts ...grpc.CallOption) (*EmptyResp, error)
	PrePareMultiUpload(ctx context.Context, in *PreMultiUploadReq, opts ...grpc.CallOption) (*MultipartUploadResult, error)
	MultipartUpload(ctx context.Context, in *MultiUploadReq, opts ...grpc.CallOption) (*MultipartUploadResult, error)
	MultipartUploadComplete(ctx context.Context, in *MultiUploadCompleteReq, opts ...grpc.CallOption) (*MultipartUploadResult, error)
	MultipartUploadAbort(ctx context.Context, in *MultiUploadCompleteReq, opts ...grpc.CallOption) (*EmptyResp, error)
	GenerateURL(ctx context.Context, in *GenerateURLReq, opts ...grpc.CallOption) (*GenerateURLResp, error)
}

type oOSClient struct {
	cc *grpc.ClientConn
}

func NewOOSClient(cc *grpc.ClientConn) OOSClient {
	return &oOSClient{cc}
}

func (c *oOSClient) PutObject(ctx context.Context, in *PutObjectReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := grpc.Invoke(ctx, "/pb.OOS/PutObject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oOSClient) PrePareMultiUpload(ctx context.Context, in *PreMultiUploadReq, opts ...grpc.CallOption) (*MultipartUploadResult, error) {
	out := new(MultipartUploadResult)
	err := grpc.Invoke(ctx, "/pb.OOS/PrePareMultiUpload", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oOSClient) MultipartUpload(ctx context.Context, in *MultiUploadReq, opts ...grpc.CallOption) (*MultipartUploadResult, error) {
	out := new(MultipartUploadResult)
	err := grpc.Invoke(ctx, "/pb.OOS/MultipartUpload", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oOSClient) MultipartUploadComplete(ctx context.Context, in *MultiUploadCompleteReq, opts ...grpc.CallOption) (*MultipartUploadResult, error) {
	out := new(MultipartUploadResult)
	err := grpc.Invoke(ctx, "/pb.OOS/MultipartUploadComplete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oOSClient) MultipartUploadAbort(ctx context.Context, in *MultiUploadCompleteReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := grpc.Invoke(ctx, "/pb.OOS/MultipartUploadAbort", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oOSClient) GenerateURL(ctx context.Context, in *GenerateURLReq, opts ...grpc.CallOption) (*GenerateURLResp, error) {
	out := new(GenerateURLResp)
	err := grpc.Invoke(ctx, "/pb.OOS/GenerateURL", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OOS service

type OOSServer interface {
	PutObject(context.Context, *PutObjectReq) (*EmptyResp, error)
	PrePareMultiUpload(context.Context, *PreMultiUploadReq) (*MultipartUploadResult, error)
	MultipartUpload(context.Context, *MultiUploadReq) (*MultipartUploadResult, error)
	MultipartUploadComplete(context.Context, *MultiUploadCompleteReq) (*MultipartUploadResult, error)
	MultipartUploadAbort(context.Context, *MultiUploadCompleteReq) (*EmptyResp, error)
	GenerateURL(context.Context, *GenerateURLReq) (*GenerateURLResp, error)
}

func RegisterOOSServer(s *grpc.Server, srv OOSServer) {
	s.RegisterService(&_OOS_serviceDesc, srv)
}

func _OOS_PutObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutObjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OOSServer).PutObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.OOS/PutObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OOSServer).PutObject(ctx, req.(*PutObjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OOS_PrePareMultiUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreMultiUploadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OOSServer).PrePareMultiUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.OOS/PrePareMultiUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OOSServer).PrePareMultiUpload(ctx, req.(*PreMultiUploadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OOS_MultipartUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiUploadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OOSServer).MultipartUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.OOS/MultipartUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OOSServer).MultipartUpload(ctx, req.(*MultiUploadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OOS_MultipartUploadComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiUploadCompleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OOSServer).MultipartUploadComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.OOS/MultipartUploadComplete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OOSServer).MultipartUploadComplete(ctx, req.(*MultiUploadCompleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OOS_MultipartUploadAbort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiUploadCompleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OOSServer).MultipartUploadAbort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.OOS/MultipartUploadAbort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OOSServer).MultipartUploadAbort(ctx, req.(*MultiUploadCompleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OOS_GenerateURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateURLReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OOSServer).GenerateURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.OOS/GenerateURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OOSServer).GenerateURL(ctx, req.(*GenerateURLReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _OOS_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.OOS",
	HandlerType: (*OOSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutObject",
			Handler:    _OOS_PutObject_Handler,
		},
		{
			MethodName: "PrePareMultiUpload",
			Handler:    _OOS_PrePareMultiUpload_Handler,
		},
		{
			MethodName: "MultipartUpload",
			Handler:    _OOS_MultipartUpload_Handler,
		},
		{
			MethodName: "MultipartUploadComplete",
			Handler:    _OOS_MultipartUploadComplete_Handler,
		},
		{
			MethodName: "MultipartUploadAbort",
			Handler:    _OOS_MultipartUploadAbort_Handler,
		},
		{
			MethodName: "GenerateURL",
			Handler:    _OOS_GenerateURL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "client.proto",
}

func init() { proto.RegisterFile("client.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 632 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0xdd, 0x6e, 0xd3, 0x4c,
	0x10, 0xad, 0xeb, 0xa6, 0xad, 0x27, 0xf9, 0xfa, 0xb3, 0xfd, 0xf9, 0x4c, 0x84, 0x50, 0xb4, 0x08,
	0x29, 0x17, 0x28, 0xa0, 0xa2, 0x4a, 0xdc, 0x36, 0x21, 0x82, 0x8a, 0xb4, 0x89, 0x36, 0x89, 0xca,
	0xad, 0xed, 0x0c, 0xad, 0xa9, 0xe3, 0x5d, 0xec, 0xb5, 0xd4, 0xbc, 0x08, 0x4f, 0xc0, 0x8b, 0xf0,
	0x0e, 0x3c, 0x0a, 0x0f, 0x80, 0x76, 0xed, 0x38, 0x4e, 0x52, 0x02, 0x42, 0xe5, 0x6e, 0xe7, 0x9c,
	0xd9, 0x59, 0x9f, 0x33, 0x93, 0x09, 0x54, 0xbc, 0xc0, 0xc7, 0x50, 0x36, 0x44, 0xc4, 0x25, 0x27,
	0xeb, 0xc2, 0xa5, 0x1f, 0xa1, 0xd2, 0x4b, 0x64, 0xd7, 0xfd, 0x84, 0x9e, 0x64, 0xf8, 0x99, 0x50,
	0xd8, 0x6c, 0x26, 0xde, 0x2d, 0x4a, 0xdb, 0xa8, 0x19, 0xf5, 0xf2, 0x09, 0x34, 0x84, 0xdb, 0x48,
	0x11, 0x96, 0x31, 0xe4, 0x09, 0x40, 0x7a, 0xe1, 0xd2, 0x19, 0xa3, 0xbd, 0x5e, 0x33, 0xea, 0x16,
	0x2b, 0x20, 0x84, 0xc0, 0x46, 0x93, 0x8f, 0x26, 0xb6, 0x59, 0x33, 0xea, 0x15, 0xa6, 0xcf, 0xb4,
	0x0c, 0x56, 0x7b, 0x2c, 0xe4, 0x84, 0x61, 0x2c, 0xe8, 0x15, 0xec, 0xf7, 0x22, 0xbc, 0x48, 0x02,
	0xe9, 0x0f, 0x45, 0xc0, 0x9d, 0xd1, 0x03, 0xbd, 0x4c, 0xef, 0x60, 0xe7, 0x2d, 0x86, 0x18, 0x39,
	0x12, 0x87, 0xac, 0xf3, 0x50, 0x7a, 0x28, 0x54, 0xda, 0x77, 0xc2, 0x8f, 0x30, 0x1e, 0xf0, 0x3e,
	0x7a, 0x5a, 0x97, 0xc9, 0xe6, 0x30, 0xfa, 0x14, 0x76, 0xe7, 0x5e, 0x8e, 0x05, 0xd9, 0x03, 0x73,
	0xc8, 0xce, 0xf5, 0xbb, 0x16, 0x53, 0x47, 0xfa, 0xcd, 0x80, 0x9d, 0xbf, 0x50, 0x7d, 0x0a, 0xdb,
	0xe9, 0x85, 0xf3, 0x37, 0xfa, 0xeb, 0xca, 0x27, 0x8f, 0x54, 0x96, 0xae, 0x24, 0x9c, 0x48, 0x4e,
	0xab, 0xc5, 0x49, 0x20, 0x59, 0x9e, 0x4a, 0x0e, 0xa1, 0xd4, 0xba, 0x49, 0xc2, 0xdb, 0xac, 0x0f,
	0x69, 0xa0, 0xc4, 0xf6, 0x9c, 0x48, 0x76, 0x30, 0xbc, 0x96, 0x37, 0xf6, 0x86, 0x96, 0x52, 0x40,
	0xa6, 0xfc, 0x65, 0x32, 0x76, 0x31, 0xb2, 0x4b, 0x35, 0xa3, 0x5e, 0x62, 0x05, 0x84, 0x7e, 0x35,
	0xe0, 0xb8, 0xa0, 0xa1, 0xc5, 0xc7, 0x22, 0x40, 0x89, 0xff, 0x58, 0xcb, 0x0b, 0x28, 0xa9, 0x6f,
	0x88, 0x6d, 0xb3, 0x66, 0xae, 0xbe, 0x93, 0xe6, 0xd1, 0x1f, 0xc6, 0xf4, 0x63, 0x48, 0x15, 0xb6,
	0xdb, 0xe1, 0x48, 0x70, 0x3f, 0x94, 0x59, 0x33, 0xf2, 0x98, 0x3c, 0x06, 0xeb, 0xcc, 0xf3, 0x30,
	0x8e, 0xdf, 0xe3, 0x24, 0xeb, 0xfc, 0x0c, 0x50, 0x6c, 0x1f, 0xbd, 0x08, 0xa5, 0x62, 0xcd, 0x94,
	0xcd, 0x01, 0x72, 0x9c, 0xcb, 0xdd, 0xd0, 0x54, 0xe1, 0xbd, 0x61, 0x8c, 0xad, 0x50, 0x0d, 0x93,
	0xf2, 0x6f, 0x9b, 0xe5, 0x31, 0x79, 0x0e, 0xfb, 0x2d, 0x1e, 0x86, 0xe8, 0xc9, 0x81, 0x3f, 0x46,
	0x9e, 0x48, 0x35, 0x4f, 0x9b, 0xba, 0x09, 0xcb, 0x04, 0x79, 0x09, 0x07, 0x0c, 0x9d, 0xd1, 0x55,
	0xe4, 0x4b, 0x2c, 0xe4, 0x6f, 0xe9, 0xfc, 0xfb, 0x28, 0x7a, 0x0a, 0x5b, 0x1f, 0x2e, 0x3a, 0x7a,
	0x6a, 0x0f, 0xa1, 0xd4, 0x17, 0x8e, 0x87, 0x99, 0xe6, 0x34, 0x50, 0x68, 0x87, 0x7b, 0x4e, 0x90,
	0x89, 0x4d, 0x03, 0xfa, 0xdd, 0x80, 0xa3, 0x7b, 0xed, 0x24, 0xcf, 0xf2, 0x82, 0x59, 0x53, 0xcb,
	0xca, 0xfa, 0x0c, 0x62, 0xf9, 0x63, 0x33, 0x2f, 0xd6, 0xe7, 0xbc, 0xd8, 0x03, 0x73, 0xe6, 0x9d,
	0x3a, 0x6a, 0x77, 0xa6, 0x03, 0x90, 0xfa, 0x36, 0xeb, 0xf2, 0x6f, 0x66, 0x4f, 0x2d, 0x96, 0xf6,
	0xc0, 0xb9, 0xd6, 0x86, 0x59, 0x4c, 0x9f, 0x55, 0x3d, 0xa5, 0x41, 0xfa, 0x3c, 0xd4, 0xc6, 0x58,
	0x2c, 0x8f, 0x4f, 0xbe, 0x98, 0x60, 0x76, 0xbb, 0x7d, 0xd2, 0x00, 0x2b, 0x5f, 0x72, 0x64, 0x4f,
	0x09, 0x28, 0xee, 0xbc, 0xea, 0x7f, 0x0a, 0x99, 0x6d, 0xa7, 0x35, 0xf2, 0x0e, 0x48, 0x2f, 0xc2,
	0x9e, 0x33, 0xb7, 0xa3, 0xc8, 0x91, 0xbe, 0xb8, 0xb8, 0xb7, 0xaa, 0xbf, 0x9e, 0x45, 0xba, 0x46,
	0x9a, 0xb0, 0xbb, 0x40, 0x11, 0x92, 0xe7, 0xff, 0x61, 0x0d, 0x06, 0xff, 0x2f, 0x50, 0xd3, 0x1f,
	0x1d, 0xa9, 0x2e, 0xd4, 0x2a, 0xfc, 0x1a, 0x57, 0xd7, 0x6c, 0xc1, 0xe1, 0x02, 0x75, 0xe6, 0xf2,
	0x48, 0xae, 0x2c, 0xb8, 0x64, 0xd3, 0x6b, 0x28, 0x17, 0x76, 0x5e, 0x2a, 0x6c, 0x7e, 0xfd, 0x56,
	0x0f, 0x96, 0x30, 0x75, 0xd3, 0xdd, 0xd4, 0x7f, 0x40, 0xaf, 0x7e, 0x06, 0x00, 0x00, 0xff, 0xff,
	0x4c, 0xbe, 0x99, 0x00, 0x90, 0x06, 0x00, 0x00,
}
